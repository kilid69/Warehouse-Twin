import pandas as pd, numpy as np, plotly.graph_objects as go
import networkx as nx
from helpers import nearest_neighbor_order, build_node_route, plot_graph
from dash import Dash, dcc, html, Output, Input, no_update
import pickle
import dash_bootstrap_components as dbc
from datetime import timedelta, date
import callbacks
import plotly.io as pio
# option A: set a global default
pio.templates.default = "plotly_white" 


app = Dash(__name__, title="Warehouse Dashboard", 
           external_stylesheets=[dbc.themes.MINTY, ])  # create the Dash app instance

# Load Warehouse Plot
with open("warehouse_graph.pkl", "rb") as f:
    G = pickle.load(f)

# 1) Build positions from node attributes (x,y) so the plot uses your floor-plan coordinates.
pos = {n: (G.nodes[n]['x'], G.nodes[n]['y']) for n in G.nodes()}

# pos = {n: (float(d["x"]), float(d["y"])) for n, d in G.nodes(data=True)}
base_fig = plot_graph(G, pos)

end_date=date(2023, 10, 15)

# The layout defines what appears on the web page: a Graph and a timer (Interval).
app.layout = html.Div([
    dbc.Row([
        dbc.Col([html.H1("Warehouse Dashboard")],xs=12,lg=7),
        dbc.Col([html.H5("Pick Date Range:")],style={"align-content":"center"},xs=12,lg=2),
        dbc.Col([
                dbc.CardBody(dcc.DatePickerRange(
                            start_date=end_date-timedelta(30),
                            end_date=end_date,
                            max_date_allowed=end_date,
                            min_date_allowed=end_date-timedelta(300),
                            id="date-picker")),],xs=12,lg=3)
    ], style={"margin-bottom":"20px"}),
    dbc.Row([
        # left column
        dbc.Col([
            dbc.Row([
                
                dbc.Col([
                    dbc.Card([
                        dbc.CardHeader("Total Orders per Day", className="bg-primary text-white"),
                        dbc.CardBody([
                                dcc.Graph(id="plot-order-cnt-daily", style={"height":"200px"}, config={"displayModeBar": False})
                            ])
                    ], className="border-primary"),
                    dbc.Card([
                        dbc.CardHeader("Average Orders handled per Operator per Day", className="bg-primary text-white"),
                        dbc.CardBody([dcc.Graph(id="plot-operator-cnt-orders", style={"height":"200px"}, config={"displayModeBar": False}),
                                      html.P("To see details, click on the Barchart for that Operator and check the details on the box below.", 
                                             style={"font-size":"15px", "margin-bottom":"0.5rem", "margin-top":"0.5rem"})])
                    ], style={"margin-top":"20px"}, className="border-primary"),
                    dbc.Card([
                        dbc.CardHeader("Orders handled By the Operator", className="bg-primary text-white"),
                        dbc.CardBody([
                            html.H6("Select Order to see details:"),
                            dcc.Dropdown(options=[], id="orders-dropdown")]),
                            dbc.Tooltip(target="orders-dropdown", children="If this Dropdown is empty, select an operator from the barchart above."),
                            html.Div(id="operator-orders-info", style={"margin-left": "20px"})
                    ], style={"margin-top":"20px", "margin-bottom":"50px"}, className="border-primary")
                ]),
            ])
        ], xs=12, md=6, lg=4),
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Warehouse Plot", className="bg-primary text-white"),
                dbc.CardBody([
                    dcc.Graph(figure=base_fig, id="warehouse"),
                    html.Div([
                        html.H6("Optimize Path", style={"margin-right": "12px"}),
                        dbc.Switch(id="toggle-path-optimizer", value=False, style={"margin-right": "8px", "font-size":25}),
                        html.Div(id="path-length")
                    ], style={"display": "flex", "alignItems": "center", "margin-top":"20px"}),
                    dbc.Tooltip(target="toggle-path-optimizer", 
                                children=(
                                        "After you selected an Operator and Order, you'll see the path that has been chosen by the data provider.\n\n"
                                        "If you turn on this toggle, you'll see an optimized path generated by me.\n Sometimes there is no difference and\n"
                                        "sometimes there is a huge difference.\n\n For instance select Operator 5 and then Order Number 123619"
                                ),
                                placement="bottom"
                                )
                ])
            ], className="border-primary"),
            dbc.Card([
                dbc.CardHeader("Information about this dashboard", className="bg-primary text-white"),
                dbc.CardBody([
                    html.Div([
                        html.P("""This Data has a very limited information about the Orders. And I also assume it is incomplete because it
                                has less than 5 orders in most days. Therefore there is not much to explore.
                                This Dashboard is just a prototype."""),
                    ],),
                ])
            ], className="border-primary",  style={"margin-top":"20px"})
        ],xs=12,md=6,lg=8)
    ]),
    dbc.Row([
        dbc.Col(
            html.Div("Developed By Alireza Shirmohammadian"), xs=12, md=4), 
        ], justify="center"),
    dbc.Row([
        dbc.Col([
                html.Div("""Data is collected from Furlan de Assis, Rodrigo (2024)""",
                        id="copy-right"),
                dbc.Tooltip(target="copy-right", 
                            children=(
                                """Furlan de Assis, Rodrigo (2024)\n
                                “Order Picking Dataset from a Warehouse of a Footwear Manufacturing Company”,
                                Mendeley Data, \nV1, doi: 10.17632/pf2w725pw3.1
                                """    
                            )) 
        ], xs=12, md=5)
        ], justify="center", style={"margin-bottom": "25px"})   
], className="container")



if __name__ == "__main__": 
    app.run(debug=True)   
